name: compile test

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "compile"
  cancel-in-progress: true

jobs:
  test:
    runs-on: windows-latest
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: installed
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: d8f4a4703a8b5e80f56f4978c72b3d2f21d312ff
          # runVcpkgInstall: true
      - uses: lukka/run-cmake@v10
        with:
          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended to the cmake command.
          # This is useful to reduce the number of CMake's Presets since you can reuse
          # an existing preset with different variables.
          # configurePresetAdditionalArgs: "['-DENABLE_YOUR_FEATURE=1']"

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: 'ninja-vcpkg-release'
          # Additional arguments can be appended when building, for example to specify the
          # configuration to build.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # buildPresetAdditionalArgs: "['--config Release']"

          # # This is the name of the CMakePresets.json's configuration to test the project with.
          # testPreset: 'ninja-multi-vcpkg'
          # # Additional arguments can be appended when testing, for example to specify the config
          # # to test.
          # # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # testPresetAdditionalArgs: "['--config Release']"
      # - name: build
      #   run: |
      #     cmake .
      #     cd build/
      #     cmake --build .
  
